/*! \mainpage The GRVY Library

<b>Version \version</b>, Build Date: \builddate

Built by: \builduser on \buildhost
<hr>

\section overview Overview

\image html grvy-small.png

The GRVY Toolkit is a library used to house various support
functions often required for application development of
high-performance, scientific applications.  The library is written in
C++, but provides an API for development in C and Fortran.  The
primary functionality provided by the library is categorized as
follows:

<ul>
<li>a flexible method for
parsing keyword driven input files (with backwards-compatibility support)
<li>a performance timing mechanism to provide a simple
summary of individual code section performance along with basic
statistics
<li> an HDF5 based historical performance mechanism for logging 
application performance over time on various compute resources
<li> a simple priority-based logging mechanism to control application messages
<li> utilities for offloading out-of-core read/write operations to a
pool of distributed shared-memory nodes using MPI for data transfer
<li> miscellaneous file handling and math utilities
</ul>

To aid in usage, this document is
further divided into the following subsections:

<ul>
<!-- <li> \subpage model "Library Overview" -->
<li> \subpage installation
<li> \ref Capi "C API"
<li> \ref CXXapi "C++ API"
<li> \ref Fapi "Fortran API"
<!--<li> <a href="http://buildbot.ices.utexas.edu/docs/buildbot/hpct/docs/html/lcov/build/src/index.html">Buildbot Coverage</a>-->
</ul>

<!-- <li> <a href="lcov/index.html">Code Coverage Analysis</a> -->

<!-- \subpage examples Examples -->

\section bugs Reporting Bugs

Bugs in the code and errors or omissions in the documentation can be
reported on <a href="https://github.com/hpcsi/grvy">GitHub</a>.  Requests and contributions are
welcome as well.  All bug reports should include:
<ul>

<li>the version number of the GRVY library (versioning information can
be obtained by running the <B><code>grvy_version</code></B> binary located in the
bin/ directory of a local libGRVY installation),
<li>the hardware and operating system,
<li>the local compiler version number,
<li>a description of the bug behavior, and ideally, 
<li>a short program which reproduces the bug.
</ul>

<hr>
\copydoc LicenseLGPL
<hr>
\section acknowledgements Acknowledgments
\copydoc Acknowledgments

 */

/*! \page CinputExample Input Parsing Example using C API 

An illustrative code example in C using the input parsing API is shown
below (and is also available in the \e examples directory from a
top-level install). This C example is configured to parse the example
pecos-input.txt file shown \ref inputFile "here" and uses many of the available
parsing routines including a demonstration of default value
registration.

\include input.c
*/

/*! \page F90inputExample Input Parsing Example using Fortran API 

An illustrative code example in F90 using the input parsing API is shown
below (and is also available in the \e examples directory from a
top-level install). This C example is configured to parse the example
pecos-input.txt file shown \ref inputFile "here" and uses many of the available
parsing routines including a demonstration of default value
registration.

\include inputf.f90
*/

/*! \page CXXinputExample Input Parsing Example using C++ API 

An illustrative code example in C++ using the input parsing API is shown
below (and is also available in the \e examples directory from a
top-level install). This C++ example is configured to parse the example
pecos-input.txt file shown \ref inputFile "here" and uses many of the available
parsing routines including a demonstration of default value
registration.

\include cpp-input.cpp
*/

/*! \page CtimerExample Performance Timing Example using C API 

An illustrative code example in C using the performance timer API is
shown below (and is also available in the \e examples directory from a
top-level install).  This example illustrates basic timer usage
(including the use of nested timers).

\include timer.c
*/

/*! \page CXXtimerExample Performance Timing Example using C++ API 

An illustrative code example in C++ using the performance timer API is
shown below (and is also available in the \e examples directory from a
top-level install).  This example illustrates basic timer usage
(including the use of nested timers).

\include cpp-timer.cpp
*/

/*! \page F90timerExample Performance Timing Example using Fortran API 

An illustrative code example in F90 using the performance timer API is
shown below (and is also available in the \e examples directory from a
top-level install).  This example illustrates basic timer usage.

\include timerf.f90
*/

/*! \page CloggingExample Logging Example using C API 

An illustrative code example in C using available priority-based logging routines.

\include messages.c
*/

/*! \page F90mathExample Floating Point Error Detection using Fortran API 

An illustrative code example in F90 using the available inf/nan  tests is shown
below (and is also available in the \e examples directory from a
top-level install). 

\include math.f90
*/

/*! \page inputFile Example libGRVY Input File

This is an example input file for use with the libGRVY parsing mechanism.
Note that behind the scenes, the library is using
the <a href="http://getpot.sourceforge.net/">GetPot</a> parsing tool
to provide a flexible parsing mechanism for C/C++ and Fortran.  Note
that the default comment delimiter is defined as the \# sign and
comments can begin at the beginning of a line or after a variable
declaration to aid in documenting the input file.  The parsing
mechansism is keyword driven and can be organized into multiple
sections.  Consequently, you are allowed to have variables of the same
name so long as they are within unique section definitions.  Note also
that because the parsing mechanism is keyword driven, the input
directives can be specified in \e arbitrary order.  There is no
requirement to maintain a specific variable declaration pattern.

<b>Important Note for Fortran Programmers</b> The input parser can
handle double precision input using standard C style notation;
however, it will not support Fortran's "d" delimiter. So, please specify
double precision values as \e 1.2345e6 as opposed to \e 1.2345d6.

<hr>

\include pecos-input.txt

*/

/*! \page installation Installation and Linkage

libGRVY uses the GNU autotools suite (autoconf, automake, and libtool)
for its development build system.  This system is popular among the
Linux development community and provides a familiar build environment
for end users. The three basic steps of the autotools process are:

- \ref Configuration
- \ref Build
- \ref Installation  

These installation steps are discussed in more detail below followed
by information on how to \ref Linkage "link" against the library once installed.  To
initiate the build process starting from a release distribution, you
should first untar the distribution and enter the top-level directory:

<div class="fragment"><pre class="fragment">
\> tar xvfz grvy-$(VERSION).tar.gz
\> cd grvy-$(VERSION)/            
</pre></div>

<b>External Software Dependencies:</b>

\li <a href="http://www.boost.org/">Boost C++ library </a>  -> \b required
\li <a href="http://www.hdfgroup.org/HDF5/">HDF5 library</a> -> \em optional
\li MPI library (e.g. <a href="http://mvapich.cse.ohio-state.edu/overview/mvapich2/"> MVAPICH2</a>, 
    <a href="http://www.open-mpi.org/"> OpenMPI</a>, 
    <a href="http://www.mcs.anl.gov/research/projects/mpich2/"> MPICH2</a>)  -> \em optional

The minimum software required to build libGRVY is a local copy of the
Boost library. Note that you can choose to build libGRVY against a \a
header-only version of Boost or a full library installation. A build
using the header-only version will disable some miscellaneous libGRVY
functionality which leverages Boost libraries (grvy_copy_dir(), in
particular).  Additional library functionality can be enabled via
linkage to optional HDF and MPI libraries.

<hr>

\anchor Configuration <h2>Configuration </h2> 

If Boost is installed and available within your default login
environment, then libGRVY should automatically configure against the
available installation.  If, however, your Boost installation is in a
non-standard location, use the \c "--with-boost" option to specify
the location.

Since libGRVY provides a Fortran interface, a valid Fortran90 compiler
is also required.  To date, libGRVY has been successfully tested with
\e gfortran and the Intel \e ifort compilers.  The configuration step
will look for available compilers in the user environment but as with
any \e autoconf based configuration, these can be overridden with
command line arguments (by setting \c CXX, \c CC, and \c FC
appropriately).  For full documentation on available configuration
options, run \c "configure --help".  The examples below highlight
common configuration examples:

<em>Configure with Boost from default login environment (and request
installation in user's ~/bin/grvy directory):</em> <br>

\code > ./configure --prefix=$HOME/bin/grvy \endcode

<em>Or, configure with Boost from a specific directory:</em>        <br>

\code > ./configure --prefix=$HOME/bin/grvy --with-boost=$MY_BOOST_DIR/boost-1.37.0 \endcode

<em>Or, configure with specific Intel compilers:</em>        <br>

\code > ./configure CXX=icpc CC=icc FC=ifort --prefix=$HOME/bin/grvy \endcode

<em>Or, configure for Boost header-only compilation:</em>        <br>

\code > ./configure --prefix=$HOME/bin/grvy --enable-boost-headers-only\endcode

<em>Or, enable optional functionality requiring MPI:</em>        <br>

\code > ./configure --prefix=$HOME/bin/grvy --enable-mpi\endcode

<em>Or, enable optional functionality requiring HDF5:</em>        <br>

\code > ./configure --prefix=$HOME/bin/grvy --with-hdf5=$MY_HDF5_DIR/bin/hdf5-1.8.4\endcode

\anchor Build <h2> Build </h2>

Once configured, issue a \c "make" to build the software. If successful, this
will build the libGRVY library (static and dynamic versions) along with relevant binaries and several
examples.

\code > make \endcode

<b> Verifying the build:</b> To verify that the software is working
properly, a test option is provided to run a short suite of
functionality tests against the local build.  To run, issue a \c "make
check" to initiate the tests.  If successful, output similar to the
following will be generated (the exact number of tests will vary depending on
version and configuration options):

\code
 > make check
-------------------------------------------------------
Initializing GRVY Tests
-------------------------------------------------------
PASS: init.sh
PASS: C_input_read_variables
PASS: C_input_nofile_available
PASS: C_input_read_missing_variable
PASS: C_input_register_variables
PASS: C_input_register_read_missing_variable
PASS: C_input_dos_newlines
PASS: C_timer_sum
PASS: C_timer_std_width.sh
PASS: C_timer_expanded_width.sh
PASS: C_timer_stats
PASS: C_timer_baseline
PASS: C_timer_no_init
PASS: C_timer_with_reset
PASS: C_timer_no_finalize.sh
PASS: C_unique_dir
PASS: C_wrapper_scratch_dir.sh
PASS: C_math_isnan
PASS: C_math_isinf
PASS: C_check_file_path
PASS: C_input_fdump
PASS: C_wrapper_log.sh
PASS: C_wrapper_log_printf.sh
PASS: C_version
PASS: C_version_stdout
PASS: C_check_copy_dir
PASS: C_hdf_hist_timing
PASS: F_hdf_hist_timing
PASS: CXX_input
PASS: CXX_input_register_variables
PASS: CXX_input_dump
PASS: CXX_timer_std_width.sh
PASS: CXX_timer_expanded_width.sh
PASS: CXX_timer_no_init
PASS: CXX_hdf_hist_timing
PASS: F_wrapper_unique_dir.sh
PASS: F_wrapper_scratch_dir.sh
PASS: F_math
PASS: F_wrapper_check_file_path.sh
PASS: F_wrapper_log.sh
PASS: F_input_read_variables
PASS: F_input_nofile_available
PASS: F_input_read_missing_variable
PASS: F_input_register_variables
PASS: F_input_read_bigstring
PASS: F_input_dump.sh
PASS: F_timer.sh
PASS: F_timer_std_width.sh
PASS: F_timer_expanded_width.sh
PASS: F_version
PASS: F_get_command_arguments.sh
PASS: F_check_copy_dir
-------------------------------------------------------
Standalone Binaries
-------------------------------------------------------
PASS: version
PASS: hostinfo
PASS: gadd.sh
PASS: gadd_unknown_option.sh
PASS: gadd_with_options.sh
PASS: gdump.sh
PASS: gdump_unknown_options.sh
PASS: gdump_with_options.sh
-------------------------------------------------------
Finalizing GRVY Tests, have a snazzy day 
-------------------------------------------------------
 
PASS: finalize.sh
===================
All 61 tests passed
===================
\endcode

\anchor Installation <h2> Installation </h2>

After the build is complete, issue a \c "make install" to install
the library.  The installation will consist of four top-level
directories housing the library, binaries, include files, and
example files.  An example of the top-level directories after
installation is shown below:

\code > make install \endcode

Top-level libGRVY installation directory:

\code
 > ls $HOME/bin/grvy/
 bin/ examples/  include/  lib/
\endcode


\anchor Linkage <h2>Library Linkage</h2>

To link an external C/C++ or Fortran application with an installed
version of the library, the \c include directory must be added to the
compilers include search path in order to access the grvy.h header
file (or for Fortran, the \c lib directory should be added to access
the pre-compiled grvy F90 module).  The \c lib directory should also
be added to the linker search path along with a request to link
against the libGRVY library (and the Fortran interface for F90
applications).  Several example link steps are provided below.  These
examples assume that the libGRVY library has been successfully built
and installed previously in the users's ~/bin/grvy directory:

<h3>C/C++ Example</h3>

\code > $(CC) -I$HOME/bin/grvy/include app.c -L$HOME/bin/grvy/lib -lgrvy \endcode

<h3>Fortran Example</h3>

\code > $(FC) -I$HOME/bin/grvy/lib app.f90 -L$HOME/bin/grvy/lib -lgrvy -lgrvyf \endcode

To embed the dynamic library search path for the libGRVY library
directly into the application executable, use an additional linker
option as follows:

<h3>C/C++ Example (with embedded rpath)</h3>

\code > $(CC) -I$HOME/bin/grvy/include app.c -L$HOME/bin/grvy/lib \
         -Wl,-rpath,$HOME/bin/grvy/lib -lgrvy \endcode


<b>Important Note:</b> F90 module file formats are not consistent
across multiple compilers. Therefore, a Fortran application and the libGRVY
F90 interface \em must be built with the same Fortran compiler family to ensure
compatibility.


*/


